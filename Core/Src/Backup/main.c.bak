/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "pdm2pcm.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "cs43l22.h"
#include "stdbool.h"
#include "arm_math.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define USE_FLOAT_BUFFERS   1
#define BYPASS_FILTERS      0


#define FILTER_TAP_NUM 53
#define BLOCK_SIZE_FLOAT AUDIO_BUFFER_SIZE/8

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CRC_HandleTypeDef hcrc;

I2C_HandleTypeDef hi2c1;

I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi3_tx;

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

arm_fir_instance_f32 firsettings_l;

//fir state size is always number_of_samples + number_of_fir_tabs - 1
float32_t  fir_l_state [BLOCK_SIZE_FLOAT + FILTER_TAP_NUM - 1];

float32_t  signal_in_float [BLOCK_SIZE_FLOAT];
float32_t  signal_out_float [BLOCK_SIZE_FLOAT];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_I2S2_Init(void);
static void MX_I2S3_Init(void);
static void MX_CRC_Init(void);
static void MX_I2C1_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define AUDIO_I2C_ADDRESS 0x94

uint16_t txBuf[AUDIO_BUFFER_SIZE];
uint16_t pdmRxBuf[PDM_BUF_SIZE];
int16_t signal_out[AUDIO_BUFFER_SIZE / 8];
int16_t signal_in[AUDIO_BUFFER_SIZE / 8];
uint16_t MidBuffer[PDM_BUF_SIZE/8];
uint8_t txstate = 0;
uint8_t rxstate = 0;

#define FIFO_BUFFFER_SIZE AUDIO_BUFFER_SIZE * 2
uint16_t fifobuf[FIFO_BUFFFER_SIZE];
uint16_t fifo_w_ptr = 0;
uint16_t fifo_r_ptr = 0;
uint8_t fifo_read_enabled = 0;
uint8_t new_data_available = 0;

void FifoWrite(uint16_t data)
{
    fifobuf[fifo_w_ptr] = data;
    fifo_w_ptr++;
    if(fifo_w_ptr >= FIFO_BUFFFER_SIZE) fifo_w_ptr=0;
}

uint16_t FifoRead()
{
    uint16_t val = fifobuf[fifo_r_ptr];
    fifo_r_ptr++;
    if(fifo_r_ptr >= FIFO_BUFFFER_SIZE) fifo_r_ptr=0;
    return val;
}

void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{
    txstate = 1;
}

void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
    txstate = 2;
}

void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
    rxstate = 2;
}

void BSP_AUDIO_IN_HalfTransfer_CallBack(void)
{
    rxstate = 1;
}

void resolve_rx_events()
{
    if (rxstate == 1)
    {
        PDM_Filter(&pdmRxBuf[0], &MidBuffer[0], &PDM1_filter_handler);
        for (int i = 0; i < PDM_BUF_SIZE/8; i++)
        {
            FifoWrite(MidBuffer[i]);
        }
        if (fifo_w_ptr - fifo_r_ptr > AUDIO_BUFFER_SIZE) fifo_read_enabled = 1;
        rxstate = 0;

    }

    if (rxstate == 2)
    {
        PDM_Filter(&pdmRxBuf[PDM_BUF_SIZE / 2], &MidBuffer[0],
                &PDM1_filter_handler);
        for (int i = 0; i < PDM_BUF_SIZE/8; i++)
        {
            FifoWrite(MidBuffer[i]);
        }
        rxstate = 0;

    }

}



void resolve_tx_events()
{
    if (txstate == 1)
    {

        for (int i = 0, j = 0; i < AUDIO_BUFFER_SIZE / 2; i += 4, j++)
        {

#ifdef USE_FLOAT_BUFFERS
            signal_out[j] =  (((int)signal_out_float[j]))&0xFFFF;
#endif
            uint16_t data = signal_out[j];
            txBuf[i] = data;
            txBuf[i + 2] = data;
        }

        txstate = 0;
    }

    if (txstate == 2)
    {

        for (int i = AUDIO_BUFFER_SIZE / 2, j = 0; i < AUDIO_BUFFER_SIZE; i +=
                4, j++)
        {
#ifdef USE_FLOAT_BUFFERS
            signal_out[j] =  (((int)signal_out_float[j]))&0xFFFF;
#endif
            uint16_t data = signal_out[j];
            txBuf[i] = data;
            txBuf[i + 2] = data;
        }

        txstate = 0;
    }

}

bool tx_events_ready()
{
    return (txstate == 1 || txstate == 2);
}

bool get_signal_in_from_fifo()
{
    if (fifo_read_enabled)
    {
        for (int i = 0; i < AUDIO_BUFFER_SIZE / 8; i++)
        {
            signal_in[i] = FifoRead();
#ifdef USE_FLOAT_BUFFERS
            signal_in_float[i] = (float) ((int) (signal_in[i]));
#endif
        }
        return true;
    }
    else return false;

}

void clear_tx_event_flag()
{
    txstate = 0;
}



/*

FIR filter designed with
http://t-filter.appspot.com

sampling frequency: 48000 Hz

* 0 Hz - 2000 Hz
  gain = 1
  desired ripple = 5 dB
  actual ripple = 3.284632065621469 dB

* 5000 Hz - 24000 Hz
  gain = 0
  desired attenuation = -30 dB
  actual attenuation = -32.02295267957132 dB

*/



//static float32_t  filter_taps[FILTER_TAP_NUM] = {    //17
//  -0.0021834891907904987,
//  0.023133081888390004,
//  0.03440125360693663,
//  0.054016706019288735,
//  0.07610902012650608,
//  0.09772535709704201,
//  0.11593264129629442,
//  0.12810228628568973,
//  0.13238343618749146,
//  0.12810228628568973,
//  0.11593264129629442,
//  0.09772535709704201,
//  0.07610902012650608,
//  0.054016706019288735,
//  0.03440125360693663,
//  0.023133081888390004,
//  -0.0021834891907904987
//};

static float32_t  filter_taps[FILTER_TAP_NUM] = {  //53
    0.000487879215057679,
    0.000273657851455823,
    0.000000000000000000,
    -0.000392159042190373,
    -0.000956339155610799,
    -0.001723727819326004,
    -0.002687100870527081,
    -0.003788056043723912,
    -0.004909925369268992,
    -0.005878152999198250,
    -0.006469063768211289,
    -0.006426903909375043,
    -0.005487936055057365,
    -0.003409355679298085,
    0.000000000000000002,
    0.004850645107641686,
    0.011148695315753923,
    0.018780560367612505,
    0.027508490716597805,
    0.036978291312972714,
    0.046739212088825234,
    0.056274665644593713,
    0.065041167848002651,
    0.072511897505948400,
    0.078220650419810633,
    0.081801801375354713,
    0.083022211884319491,
    0.081801801375354713,
    0.078220650419810633,
    0.072511897505948400,
    0.065041167848002665,
    0.056274665644593720,
    0.046739212088825234,
    0.036978291312972721,
    0.027508490716597809,
    0.018780560367612512,
    0.011148695315753925,
    0.004850645107641687,
    0.000000000000000002,
    -0.003409355679298085,
    -0.005487936055057365,
    -0.006426903909375048,
    -0.006469063768211289,
    -0.005878152999198255,
    -0.004909925369269001,
    -0.003788056043723914,
    -0.002687100870527083,
    -0.001723727819326004,
    -0.000956339155610798,
    -0.000392159042190373,
    0.000000000000000000,
    0.000273657851455823,
    0.000487879215057679
    };
//
//static float32_t  filter_taps[FILTER_TAP_NUM]=
//{
//    -0.001314261020922494,
//    -0.001285950678927077,
//    -0.000487743018565632,
//    0.001295881780392202,
//    0.003566019354255526,
//    0.004691766007787711,
//    0.002595130583286755,
//    -0.003462723469164363,
//    -0.011163117074200715,
//    -0.015171497746038546,
//    -0.009831209574899807,
//    0.006449663482459595,
//    0.027779599845743075,
//    0.041181073727536328,
//    0.031810121296990596,
//    -0.008990895843495200,
//    -0.077089314395958466,
//    -0.154617037336660296,
//    -0.216160737324945534,
//    0.760410462810652499,
//    -0.216160737324945534,
//    -0.154617037336660296,
//    -0.077089314395958480,
//    -0.008990895843495201,
//    0.031810121296990596,
//    0.041181073727536328,
//    0.027779599845743071,
//    0.006449663482459596,
//    -0.009831209574899809,
//    -0.015171497746038546,
//    -0.011163117074200720,
//    -0.003462723469164367,
//    0.002595130583286756,
//    0.004691766007787710,
//    0.003566019354255523,
//    0.001295881780392203,
//    -0.000487743018565632,
//    -0.001285950678927076,
//    -0.001314261020922494,
//};




/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_I2S2_Init();
    MX_I2S3_Init();
    MX_CRC_Init();
    MX_PDM2PCM_Init();
    MX_I2C1_Init();
    MX_SPI1_Init();
    /* USER CODE BEGIN 2 */

    /* Initialize the audio driver structure */
    cs43l22_Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 100,
    I2S_AUDIOFREQ_48K);
    cs43l22_Play(AUDIO_I2C_ADDRESS, NULL, 0);
    HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], AUDIO_BUFFER_SIZE / 2);
    HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0], PDM_BUF_SIZE / 2);

    //init FIR structure
      arm_fir_init_f32(&firsettings_l, FILTER_TAP_NUM, &filter_taps[0], &fir_l_state[0], BLOCK_SIZE_FLOAT);

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */

        resolve_rx_events();

        if (tx_events_ready())
        {
            if (get_signal_in_from_fifo())
            {
                //Processing here
#if BYPASS_FILTERS
#if USE_FLOAT_BUFFERS
                for (int i = 0; i < AUDIO_BUFFER_SIZE / 8; i++)
                {
                    signal_out_float[i] = signal_in_float[i];
                }
#else
                for (int i = 0; i < AUDIO_BUFFER_SIZE / 8; i++)
                {
                    signal_out[i] = signal_in[i];
                }
#endif
#else
                //process FIR
                arm_fir_f32 (&firsettings_l, &signal_in_float[0], &signal_out_float[0],BLOCK_SIZE_FLOAT);

#endif

                resolve_tx_events();
            }
            else
            {
                clear_tx_event_flag();
            }
        }

    }
    /* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct =
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
    { 0 };

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 84;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
    { 0 };

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
    {
        Error_Handler();
    }
}

/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{

    /* USER CODE BEGIN CRC_Init 0 */

    /* USER CODE END CRC_Init 0 */

    /* USER CODE BEGIN CRC_Init 1 */

    /* USER CODE END CRC_Init 1 */
    hcrc.Instance = CRC;
    if (HAL_CRC_Init(&hcrc) != HAL_OK)
    {
        Error_Handler();
    }
    __HAL_CRC_DR_RESET(&hcrc);
    /* USER CODE BEGIN CRC_Init 2 */

    /* USER CODE END CRC_Init 2 */

}

/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{

    /* USER CODE BEGIN I2C1_Init 0 */

    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}

/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{

    /* USER CODE BEGIN I2S2_Init 0 */

    /* USER CODE END I2S2_Init 0 */

    /* USER CODE BEGIN I2S2_Init 1 */

    /* USER CODE END I2S2_Init 1 */
    hi2s2.Instance = SPI2;
    hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
    hi2s2.Init.Standard = I2S_STANDARD_MSB;
    hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
    hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
    hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
    hi2s2.Init.CPOL = I2S_CPOL_LOW;
    hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
    hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
    if (HAL_I2S_Init(&hi2s2) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN I2S2_Init 2 */

    /* USER CODE END I2S2_Init 2 */

}

/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{

    /* USER CODE BEGIN I2S3_Init 0 */

    /* USER CODE END I2S3_Init 0 */

    /* USER CODE BEGIN I2S3_Init 1 */

    /* USER CODE END I2S3_Init 1 */
    hi2s3.Instance = SPI3;
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
    if (HAL_I2S_Init(&hi2s3) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN I2S3_Init 2 */

    /* USER CODE END I2S3_Init 2 */

}

/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{

    /* USER CODE BEGIN SPI1_Init 0 */

    /* USER CODE END SPI1_Init 0 */

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_MASTER;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 10;
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();

    /* DMA interrupt init */
    /* DMA1_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
    }
    /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
